package dev.kropla.dto;

import java.util.Map;

public class DicOrderTypes {
	private int rtId;
	private String rtName;
	private String rtName2;
	private String rtSymbol;
	private Map<String, String> rtDicAttribs;
	
	public int getRtId() {
		return rtId;
	}
	public Map<String, String> getRtDicAttribs() {
		return rtDicAttribs;
	}
	public void setRtDicAttribs(Map<String, String> map) {
		this.rtDicAttribs = map;
	}
	public void setRtId(int rtId) {
		this.rtId = rtId;
	}
	public String getRtName() {
		return rtName;
	}
	public void setRtName(String rtName) {
		this.rtName = rtName;
	}
	public String getRtName2() {
		return rtName2;
	}
	public void setRtName2(String rtName2) {
		this.rtName2 = rtName2;
	}
	public String getRtSymbol() {
		return rtSymbol;
	}
	public void setRtSymbol(String rtSymbol) {
		this.rtSymbol = rtSymbol;
	}
	

/** generated by gen: http://titaniclinux.net/daogen
 */
	
    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int rtIdIn,
          String rtNameIn,
          String rtName2In,
          String rtSymbolIn) {
          this.rtId = rtIdIn;
          this.rtName = rtNameIn;
          this.rtName2 = rtName2In;
          this.rtSymbol = rtSymbolIn;
    }


    /** 
     * hasEqualMapping-method will compare two OrderTypes instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(DicOrderTypes valueObject) {

          if (valueObject.getRtId() != this.rtId) {
                    return(false);
          }
          if (this.rtName == null) {
                    if (valueObject.getRtName() != null)
                           return(false);
          } else if (!this.rtName.equals(valueObject.getRtName())) {
                    return(false);
          }
          if (this.rtName2 == null) {
                    if (valueObject.getRtName2() != null)
                           return(false);
          } else if (!this.rtName2.equals(valueObject.getRtName2())) {
                    return(false);
          }
          if (this.rtSymbol == null) {
                    if (valueObject.getRtSymbol() != null)
                           return(false);
          } else if (!this.rtSymbol.equals(valueObject.getRtSymbol())) {
                    return(false);
          }
          return true;
    }


    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass OrderTypes, mapping to table rm_dic_order_types\n");
        out.append("Persistent attributes: \n"); 
        out.append("rtId = " + this.rtId + "\n"); 
        out.append("rtName = " + this.rtName + "\n"); 
        out.append("rtName2 = " + this.rtName2 + "\n"); 
        out.append("rtSymbol = " + this.rtSymbol + "\n"); 
        out.append("rtDicAttribs = " +this.rtDicAttribs.toString());
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        DicOrderTypes cloned = new DicOrderTypes();

        cloned.setRtId(this.rtId); 
        if (this.rtName != null)
             cloned.setRtName(new String(this.rtName)); 
        if (this.rtName2 != null)
             cloned.setRtName2(new String(this.rtName2)); 
        if (this.rtSymbol != null)
             cloned.setRtSymbol(new String(this.rtSymbol)); 
        return cloned;
    }


    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

	
}
